/** Implementação de conjuntos disjuntos com listas encadeadas.
* 
* @author Gabriel Nobgrega de Lima
* @version 1.0
* 	
*/ 


#ifndef LINKEDLISTSET_H
#define LINKEDLISTSET_H

#include <iostream>
#include <sstream>
#include "SetManager.h"
#include "Set.h"
#include "LinkedNode.h"


using namespace std;

class LinkedListSet: public SetManager{
private:
	int nElements; // Número de elementos
	LinkedNode *node; // 0..nElements
	int unionType; // Tipo de heurística
	unsigned long ptrOperations; // Armazena o número de operações de ponteiro
	
	void internalUnion(int x, int y); // União interna
	
	void incPointerOp(int n);
	void incPointerOp(int heuristic, int n);
	
public:
  
  //**** A documentação dos métodos nao documentados aqui se encontra na interface SetManager ou na documentação em .../documentados
  
	/**União sem qualquer heurística (Uni sempre x a y)*/
	static const int DEFAULT_UNION = 0; // União sem qualquer heurística (Uni sempre x a y)
	/**União com heurística ponderada (Uni o conjunto de menor número de elementos ao de maior)*/
	static const int WEIGHTED_UNION = 1; // União com heurística ponderada (Uni o conjunto de menor número de elementos ao de maior)
	
	/**Construtor que define o número de elementos*/
	LinkedListSet(int size);
	~LinkedListSet();

	unsigned long getPointerOperationsState();
	void clearPointerOperations();
	void setHeuristic(int type);
	int getHeuristic();
	
	/**Número de elementos.*/
	int size();
	
	bool makeSet(int n);
	int findSet(int n);
	bool unionSet(int x, int y);
	string state();
	void release();
};

#endif